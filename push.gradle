apply plugin: 'maven'
apply plugin: 'signing'

def repositoryUrl
//判断发到正式库还是snapshot库
if (isReleaseBuild()) {
    println 'Release Build'
    //上传Release私有仓库
    repositoryUrl = REPOSITORY_RELEASE_URL
} else {
    println 'Debug Build'
    //上传snapshot私有仓库
    repositoryUrl = REPOSITORY_DEBUG_URL
}

//从项目gradle.properties中读取Nexus服务器登录用户名
def getRepositoryUserName() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}
//读取Nexus服务器登录密码
def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}
//通过gradle.properties中VERSION_NAME常量判断是否是Release版本
def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

afterEvaluate { project ->
    uploadArchives {
        repositories {
            mavenDeployer {
                beforeDeployment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }

                pom.artifactId = ARTIFACT_ID
                pom.groupId = GROUP_ID
                pom.version = VERSION_NAME

                //用户名和密码授权验证
                repository(url: repositoryUrl) {
                    authentication(userName: getRepositoryUserName(), password: getRepositoryPassword())
                }

                //配置pom.xml
                pom.project {
                    //库名称
                    name ''
                    //打包下载上传的格式
                    packaging 'aar'
                    //scm(software configuration management)标签允许你配置你的代码库
                    //开发者信息
                    developers {
                        developer {
                            id ''
                            name ''
                        }
                    }
                }
            }

        }

        doLast {
            println "---------------------------------------------------------------------------------"
            println "implementation '$GROUP_ID:$ARTIFACT_ID:$VERSION_NAME'"
            println "---------------------------------------------------------------------------------"
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.sourceFiles
    }

    // 生成javadoc.jar
    task androidJavadocsJar(type: Jar) {
        // 指定文档名称
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }

    // 生成sources.jar
    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    // 产生相关配置文件的任务
    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }

}
